 enum GameStatus {
    SETUP
    REGISTRATION
    RUNNING
    SCORING
    AWARDS
    COMPLETE
  }

  input GameSettings {
    countDownSec: Int
    gameLengthInMin: Int
    health: Int
    reloads: Int
    shields: Int
    megatags: Int
    totalTeams: Int
    options: [String]
  }

  input TeamTagReport {
    gameId: ID!
    ltGameId: ID!
    ltTeamId: ID!
    ltPlayerId: ID!
    ltTagTeamId: ID!
    tags: [Int]
  }

  input BasicTagReport {
    gameId: ID!
    ltGameId: ID!
    ltTeamId: ID!
    ltPlayerId: ID!
    zoneTimeSec: Int!
    survivedTimeSec: Int!
    tagsReceived: Int!
    followUpReports: [ID]
  }

  enum ReportType {
    TEAM
    BASIC
  }

  enum ReportStatusType {
    PENDING
    COMPLETE
  }

  type ReportCheckListItem {
    gameId: ID!
    ltGameId: ID!
    ltTeamId: ID!
    ltPlayerId: ID!
    ltTagTeamId: ID
    type: ReportType!
    status: ReportStatusType!
    name: String
    avatarUrl: String
    iconUrl: String
  }

  type GameType {
    name: String!
    type: String!
    description: String!
    iconUrl: String!
  }

  type Game {
    id: ID!
    ltId: ID!
    name: String
    status: GameStatus!
    completedAt: String
    startedAt: String
  }

  type CurrentGameSettings {
    countDownSec: Int
    gameLengthInMin: Int
    health: Int
    reloads: Int
    shields: Int
    megatags: Int
    totalTeams: Int
    options: [String]
  }

  enum PlayerStatus {
    IDLE
    JOINING
    ACTIVE
  }

  type GamePlayer {
    id: ID!
    status: PlayerStatus!
    ltTeamId: ID
    ltPlayerId: ID
    name: String
    totemId: ID!
    avatarUrl: String!
    iconUrl: String!
  }

  type GamePlayerScore {
    id: ID!
    gameId: ID!
    teamId: ID
    playerId: ID
    totalTagsReceived: Int!
    totalTagsGiven: Int!
    survivedTimeSec: Int!
    zoneTimeSec: Int!
    ltGameId: ID!
    ltTeamId: ID!
    ltPlayerId: ID!
  }

  type Query {
    game_types_list: [GameType]
    game_score(id: ID!): [GamePlayerScore]
    games_list: [Game]
    game(id: ID!): Game
    active_games_list: [Game]
    game_settings(id: ID!): CurrentGameSettings
    game_players_list(id: ID!): [GamePlayer]
  }

  type Subscription {
    game_settings: CurrentGameSettings
    game_score(id: ID!): [GamePlayerScore]
    report_check_list: [ReportCheckListItem]
    games_list: [Game]
    active_games_list: [Game]
    active_players_list: [GamePlayer]
  }

  type Mutation {
    file_basic_tag_report(report: BasicTagReport!): Game
    file_team_tag_report(report: TeamTagReport!): Game
    joined_player(id: ID!, totemId: ID): GamePlayer!

    create_game(type: String!, name: String): Game
    end_game(id: ID!): Game

    update_game_settings(id: ID!, settings: GameSettings!): Game
    start_game(id: ID!): Game
    start_registration(id: ID!): Game
  }
